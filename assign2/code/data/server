private void handleAuthentication() throws IOException {
        String input = bufferedReader.readLine();
        String[] parts = input.split(" ", 4);

        if(parts[0].equals("TOKEN")){
            UserSession session = authManager.getUserSessionByToken(parts[1]);
            if(session != null){
                System.out.println("TOKEN found");
                if(!session.isExpired()){
                    System.out.println("TOKEN good");
                    currentUser = new User(session.getUsername());
                    if(session.getRoom() != null){
                        this.currentRoomName = session.getRoom().getName();
                        clientState = ClientState.IN_CHAT_ROOM;
                        sendResponse(ServerResponse.VALID_TOKEN, "ROOM");
                        sendSuccess("Joined Room: " + this.currentRoomName);
                    }
                    else{
                        clientState = ClientState.IN_LOBBY;
                        sendResponse(ServerResponse.VALID_TOKEN, "LOBBY");
                    }
                    return;
                }
                else {
                    System.out.println("TOKEN expired");
                }
            }
            else {
                System.out.println("TOKEN not found");
            }
            sendResponse(ServerResponse.INVALID_TOKEN, "");
            System.out.println("SEND INVALID");
        }

        bufferedWriter.write("Welcome to the chat server! Please login or register.");
        bufferedWriter.newLine();
        bufferedWriter.write("Enter commands LOGIN <username> <password> or REGISTER <username> <password>");
        bufferedWriter.newLine();
        bufferedWriter.flush();

        while (clientState == ClientState.AUTHENTICATING) {
            input = bufferedReader.readLine();
            if (input == null) {
                clientState = ClientState.DISCONNECTED;
                return;
            }
            System.out.println(input);
            parts = input.split(" ", 4);
            if (parts.length != 3) {
                sendError("Invalid command format. Use: COMMAND username password");
                continue;
            }

            String action = parts[0].toUpperCase();
            String username = parts[1];
            String password = parts[2];
            Command command = Command.fromString(action);
            if (command.equals(Command.LOGIN) && loggedInManager.isUserLoggedIn(username)) {
                sendError("User already logged in. Please use a different account.");
                continue;
            }

            if (command.equals(Command.LOGIN)) {
                String token = authManager.authenticate(username, password);
                if (token != null) {
                    this.currentUser = new User(username);
                    loggedInManager.userLoggedIn(username);
                    sendResponse(ServerResponse.NEW_TOKEN, token);
                    sendSuccess("Login successful! Welcome " + username);
                    break;
                }else {
                    sendError("Invalid username or password. Please try again.");
                }
            } else if (command.equals(Command.REGISTER)) {
                if(username.contains(":")){
                    sendError("Invalid username");
                    continue;
                }
                String token = authManager.registerUser(username, password);
                if (token != null) {
                    this.currentUser = new User(username);
                    loggedInManager.userLoggedIn(username);
                    sendResponse(ServerResponse.NEW_TOKEN, token);
                    sendSuccess("Registration successful! Welcome " + username);
                    break;
                } else {
                    sendError("Username already exists");
                }
            } else {
                sendError("Unknown command. Use LOGIN or REGISTER");
            }
        }
        clientState = ClientState.IN_LOBBY;
    }